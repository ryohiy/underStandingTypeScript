*2-10_型の利用
js->動的片付け言語
jsのコアなdata型
number すべての数値
string すべての文字列
boolean ture,false
object jsの全objectのこと。objectの型をより明確に定義する事が可能
Array JSの全てのArray。要素の型は柔軟にも厳格にも指定出来る。

*Tuple型　
vanillaJSにはない、TS用の型。ほかの言語(Python等)にはあったりする
TupleはArrayの亜種みたいので、要素の長さが固定された配列の事
定義した配列に対して,誤った数の要素の配列を入れようとしたり、
要素の型が違っていると、Errを出して教えて来るのが良い点

*Enum型（列挙型）
これもvanillaJSにはなくて、他の言語にはあったりするTSが追加してくれる型
定数の集合に対して名前をつけて管理することが出来る。
あんまり見慣れない定義の方法で、以下のようにする。
enum{NEW,OLD}

*any型
プログラマーの敗北。つかう事は避けるべき。
TSはこれが使われているものをchkしない。

#sec3-32TSのコンパイラ
#sec3-42プロジェクト全体のコンパイル方法
tsc --init
ルートフォルダが現在のフォルダであることを
確認し、上記のcmdを実行すると、
tsconfig.jsonというファイルを作る
このtsconfig.jsonがあるフォルダ、
そのサブフォルダにあるもの全てが
TSによって管理されるべきであるという事
をこのファイルは意味する。

とにもかくにも、これでproject全体をtscで観れる
ようになるので、tscコマンドをたたけば、
TSが自動的に.ts拡張子のファイルを全て探してコンパイル
してくれるようになるため、tsファイルが複数ある時に便利。

また tsc --watchでもtsconfig.jsonは有効、やはり
逐一行うよりも便利。
npmの詳細な使い方も正直知りたいので、それも早めに手をつけよう。

tscのsourceMap機能は個人的に便利だと思った。
普通コンパイルしたらjsファイルになるけど、この機能をonにしておけば
tsファイル作られ、かつこれに対してブレークポイントを作ってデバッグも出来る。
本番環境では絶対必要ようないけど、dev環境なら全然使っていい気がする。
removeCommentsは会社の設定でも使ってもいいなら使いたいと思った。

tsファイルではコメント欲しいけど（開発者の為に）、別にコンパイル後のjsファイルに
コメントがある必要はないなって思うし。イイ！

noEmitOnErrorをtrueにすると、tsErrがあるとコンパイルが出来ない。
逆にいえばわざわざ書かなければjsのコンパイルは出来る。

厳密な型のチェックが出来るオプション（Strict TypeChecking Options）というものが
あるけど、現時点の自分は今あるもので十分すぎる。

sec4-49~
let
const
var
varはグローバルか関数スコープのどちらかしかない
letは？
ブロックスコープアいう概念を利用している

varはがばがば過ぎる。









